pins = {};
<% %w{ red green blue yellow brown orange purple white grey black AAAAFF }.each do |colour| %>
  pins['<%= colour  %>'] = {};
  pins['<%= colour %>'][1] = new google.maps.MarkerImage(
    '<%= image_path "map-pins/pin-#{colour}.png" %>',
    new google.maps.Size(21, 34),
    new google.maps.Point(0,0),
    new google.maps.Point(10, 34)
  );
  <% (2..9).each do |number| %>
    pins['<%= colour %>'][<%= number %>] = new google.maps.MarkerImage(
     '<%= image_path "map-pins/pin#{number.to_s.rjust(2, "0")}-#{colour}.png" %>',
      new google.maps.Size(21, 34),
      new google.maps.Point(0,0),
      new google.maps.Point(10, 34)
    );
  <% end %>
<% end %>

var pinBase = new google.maps.MarkerImage(
  '<%= image_path "map-pins/home-AAFFAA.png" %>',
  new google.maps.Size(21, 34),
  new google.maps.Point(0,0),
  new google.maps.Point(10, 34)
);

var pinShadow = new google.maps.MarkerImage(
  '<%= image_path "map-pins/shadow.png" %>',
  new google.maps.Size(40, 37),
  new google.maps.Point(0, 0),
  new google.maps.Point(12, 35)
);

var mapOptions = {
  zoom: 5,
  center: new google.maps.LatLng(55, -3),
  mapTypeControl: false,
  zoomControl: true,
  mapTypeId: google.maps.MapTypeId.ROADMAP
}

var map = null;
var bounds = null;
var geocoder = new google.maps.Geocoder();
var markers = null;
var membersAll = 0;
var membersDone = 0;

// Allow member to be inscope in callback function
var plotMember = function(member) {
  return function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      var location = results[0].geometry.location;
      if (markers[location] == null) { // We've not yet seen this location
        members[location] = [member];
        var marker = new google.maps.Marker({
          position: location,
          map: map,
          icon: pins[document.getElementById('pin-' + member.grouping_id).value][1],
          shadow: pinShadow,
          clickable: true,
          title: member.name
        });
        marker.info = new google.maps.InfoWindow({
          content: member.name + " (" + member.grouping_name + ")"
        });
        google.maps.event.addListener(marker, 'click', function() {
          marker.info.open(map, marker);
        });
        markers[location] = marker;
        map.fitBounds(bounds.extend(location));
      } else { // We've already seen this location;
        members[location].push(member);
        var listOfMembers = '';
        var membersInSameGrouping = members[location][0].grouping_id;
        for(var index in members[location]) {
          var this_member = members[location][index];
          listOfMembers += '<li>' + this_member.name + " (" + this_member.grouping_name + ")" + '</li>';
          if (this_member.grouping_id != membersInSameGrouping) {membersInSameGrouping = null;}
        }
        var colour = (membersInSameGrouping == null) ? 'AAAAFF' : document.getElementById('pin-' + member.grouping_id).value;
        markers[location].setIcon(pins[colour][members[location].length]);
        markers[location].setTitle('Multiple members.');
        markers[location].info = new google.maps.InfoWindow({
          content: '<ul style="text-align: left;">' + listOfMembers + '</ul>'
        });
      }
      incrementProgress();
    } else {
      appendError(member.name + ' not included (' + status + ')');
    }
  }
}

// Allow member to be inscope in callback function
var geocodeMember = function(member) {
  return function() {
    geocoder.geocode( { 'address': member.address}, plotMember(member));
  }
}

function plot(section_id) {
  bounds = new google.maps.LatLngBounds();
  map = new google.maps.Map(document.getElementById("map"), mapOptions);
  markers = {};
  members = {};
  membersDone = 0;
  $("#errors").html('');
  $("#progress").html('Fetching map.');
  var base = document.getElementById('base').value;
  if (base.length > 0) {
    geocoder.geocode( { 'address': base}, function(results, status) {
      if (status == google.maps.GeocoderStatus.OK) {
        var location = results[0].geometry.location;
        var marker = new google.maps.Marker({
          position: location,
          map: map,
          icon: pinBase,
          shadow: pinShadow,
          clickable: true,
          title: 'Meeting place'
        });
        map.fitBounds(bounds.extend(location));
      } else {
        appendError('Meeting place not included (' + status + ')');
      }
    });
  }
  $.ajax({
    url: section_id + '/data?address=' + document.getElementById('address').value,
    dataType:'json',
    async: false,
    success: function(data, status, jqXHR) {
      membersAll = data['members'].length;
      if (membersAll == 0) {
        message = 'No members in the section have the selected contact.';
        appendError(message);
        alert(message + ' Please select a different contact and try again.');
      } else {
        for (var index in data['members']) {
          var member = data['members'][index];
          if (member.address.length > 0) {
            setTimeout(geocodeMember(member), (index * 1000));   // Don't hammer the API too fast
          } else {
            appendError(member.name + ' not included (does not have selected address)');
          }
        } // for each member
      } // if there are members
    }
  });
}


function appendError(message) {
  $("#errors").html($("#errors").html() + ($("#errors").html().length > 0 ? '<br/>' : '') + message);
}

function incrementProgress() {
  ++membersDone;
  progress = (membersDone < membersAll) ? 'Completed ' + membersDone + ' of ' + membersAll + '.' : 'Finished.';
  $("#progress").html(progress);
}
