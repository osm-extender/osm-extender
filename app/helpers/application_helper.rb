module ApplicationHelper

  # Interpret a string as markdown
  # @param text the text in markdown format
  # @returns an interpreted html_safe string representation of text
  def markdown(text)
    options = [:hard_wrap, :autolink, :no_intraemphasis, :filter_html]
    RedcarpetCompat.new(text, *options).to_html.html_safe
  end

  # Display either yes or no highlighted in gree or red
  # @param value the boolean value being represented
  # @param positive_value (optional, default true) the value to be considered positive (and displayed in green)
  # @returns an HTML safe string
  def yes_no(value, positive_value=true)
    if positive_value == value
      return "<span style=\"color: green;\">#{value ? 'yes' : 'no'}</span>".html_safe
    else
      return "<span style=\"color: red;\">#{value ? 'YES' : 'NO'}</span>".html_safe
    end
  end

  # Get the name of a day of the week (0-Sunday .. 6-Saturday)
  # @param dow day of the week (0 to 6)
  # @returns a string containing the day name
  def day_name(dow)
    return %w{Sunday Monday Tuesday Wednesday Thursday Friday Saturday}[dow]
  end

  # Get the date in the chosen format with the day of the month ordinalized
  # @param date the time to display in the format
  # @param format_string the format string to pass to the strftime methods, after replacing %d with the ordinalized day of the month
  # @returns a string representing the date
  def ordinalized_date(date, format_string)
    return date.strftime(format_string.gsub(/\%d/, date.strftime('%e').to_i.ordinalize.to_s))
  end

  # Create a link for sorting a table by a given column from the model
  # @param column a string identifying the column to sort by
  # @param title (optional) the column title to use in the link, f not provided the title is generated from column
  # @returns a link generated by the link_to helper
  def sortable_link(column, title=nil)
    css_class = 'sortable'
    title ||= column.titleize
    css_class += (column == sort_column) ? " sortable_current sortable_#{sort_direction}" : ''
    direction = ((column == sort_column) && sort_direction == "asc") ? "desc" : "asc"
    link_to title, params.merge({:sort_column => column, :sort_direction => direction, :page => nil}), {:class => css_class}
  end

  # Get the grouping name (e.g. patrol) for a given section type
  # @param type the type of section (:beavers, :cubs ...)
  # @returns a string
  def get_grouping_name(type)
    {
      :beavers=>'lodge',
      :cubs=>'six',
      :scouts=>'patrol',
      :adults=>'section'
    }[type] || 'grouping'
  end

  def div_for_password_strength_meter
    %q{<div id="password_strength_meter" style="display: inline-block; min-width: 215px; font-weight: bold; color: black; background-color: #7777ff;">No password!</div>}.html_safe
  end

end
